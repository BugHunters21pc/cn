RSA BY EBP

import random
z=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inv(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            print(x)
            return x
    print(0)
    return None

def is_prime(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True

def generate_keypair(p, q):
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')

    n = p * q

    phi = (p-1) * (q-1)

    e = random.randrange(1, phi)

    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    d = mod_inv(e, phi)

    return ((e, n), (d, n))

def encrypt(plaintext, public_key):
    e, n = public_key
    cipher = [((z.index(char) ** e) % n) for char in plaintext]
    return cipher

def decrypt(ciphertext, private_key):
    d, n = private_key
    print([(char ** d) % n for char in ciphertext])
    plain = [z[((char ** d) % n)] for char in ciphertext]
    return ''.join(plain)

p = int(input("Enter a prime number (17, 19, 23, etc): "))
q = int(input("Enter another prime number (Not one you entered above): "))
public, private = generate_keypair(p, q)
print("Your public key is ", public, " and your private key is ", private)
message = input("Enter a message to encrypt with your public key: ")
encrypted_msg = encrypt(message, public)
print(''.join(map(lambda x: str(x), encrypted_msg)))
print("Decrypting message with private key ", private, " . . .")
print("Your message is:")
print(decrypt(encrypted_msg,private))
