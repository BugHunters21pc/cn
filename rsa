RSA BY EBP

import random
z=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inv(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            print(x)
            return x
    print(0)
    return None

def is_prime(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True

def generate_keypair(p, q):
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')

    n = p * q

    phi = (p-1) * (q-1)

    e = random.randrange(1, phi)

    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    d = mod_inv(e, phi)

    return ((e, n), (d, n))

def encrypt(plaintext, public_key):
    e, n = public_key
    cipher = [((z.index(char) ** e) % n) for char in plaintext]
    return cipher

def decrypt(ciphertext, private_key):
    d, n = private_key
    print([(char ** d) % n for char in ciphertext])
    plain = [z[((char ** d) % n)] for char in ciphertext]
    return ''.join(plain)

p = int(input("Enter a prime number (17, 19, 23, etc): "))
q = int(input("Enter another prime number (Not one you entered above): "))
public, private = generate_keypair(p, q)
print("Your public key is ", public, " and your private key is ", private)
message = input("Enter a message to encrypt with your public key: ")
encrypted_msg = encrypt(message, public)
print(''.join(map(lambda x: str(x), encrypted_msg)))
print("Decrypting message with private key ", private, " . . .")
print("Your message is:")
print(decrypt(encrypted_msg,private))

SERVER - CLIENT IMPLE

SERVER

import socket

host = "localhost"
port = 4448

server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.bind((host,port))
server.listen(10)

client, addr = server.accept()
print(f"Connected {addr[0]}:{addr[1]}")

string = client.recv(1024)
string = string.decode('utf-8')
print(f"Client : {string}")

def bit_unstuffing(data):
    unstuffed_data = ""
    count = 0
    for bit in data:
        if bit == "1":
            count += 1
            unstuffed_data += bit
            if count == 5:
                count = 0
        else:
            count = 0
            unstuffed_data += bit
    return unstuffed_data

def byte_unstuffing(data, stuffing_byte):
    unstuffed_data = ""
    i = 0
    while i < len(data):
        if data[i] == stuffing_byte:
            if data[i + 1] == stuffing_byte:
                unstuffed_data += stuffing_byte
                i += 1
            else:
                unstuffed_data += data[i]
        else:
            unstuffed_data += data[i]
        i += 1
    return unstuffed_data

def unframe_data(frames, frame_size):
    data = ""
    for frame in frames:
        data += frame[frame_size:]
    return data

frames = string.split()
flag = "01111110"

# Remove FLAG values
frames = [frame[8:-8] for frame in frames]

# Perform bit unstuffing
unstuffed_data = bit_unstuffing(frames)
print(unstuffed_data)

# Convert to ASCII
unstuffed_data = byte_unstuffing(unstuffed_data, "ESC")
original_message = ""
for i in range(0, len(unstuffed_data), 8):
    byte = unstuffed_data[i:i+8]
    original_message += chr(int(byte, 2))
print(original_message.replace("ESC",""))

CLIENT

import socket

def byte_stuffing(data, stuffing_byte):
    stuffed_data = ""
    for byte in data:
        if byte == stuffing_byte:
            stuffed_data += " " + byte + " " + stuffing_byte
        else:
            stuffed_data += " " + byte
    return stuffed_data

def bit_stuffing(data):
    return data.replace("11111","11110")

data = "A ESC B ESC FLAG"
flag = "01111110"
esc = "10100011"

stuffed_data = byte_stuffing(data.split(), "ESC")
print("\nSTUFFED BYTE DATA :",stuffed_data)

binary_data = ""
for byte in stuffed_data:
    binary_data += format(ord(byte), "08b")
print("\nBINARY DATA :",binary_data)

stuffed_bit_data = bit_stuffing(binary_data)
print("\nBIT STUFFED DATA :",stuffed_bit_data)
frames = [flag+stuffed_bit_data[i:i+16]+flag for i in range(0, len(stuffed_bit_data), 16)]
print("\nFRAME :",frames)

host = "localhost"
port = 4448

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.connect((host,port))
f = "  ".join([str(elem) for elem in frames])
print("string frames:",f)
server.send(bytes(f,'utf-8'))

